{
	"tslint:disable": {
		"prefix": "tsd",
		"body": [
			"/* tslint:disable-next-line ${1:no-any} */ // ${2:reason}"
		],
		"description": "tslint:disable next line"
	},
	"node:index.ts": {
		"prefix": "nindex",
		"body": [
			"// a node has to export its:",
			"//  -> Schema (as default export)",
			"//  -> Resolver",
			"//  -> Interface of a Model (but NOT A MongoDB model, mongodb model should be used only internally)",
			"//  -> Services (for mutations and business logic)",
			"",
			"export { I${2}${1:myModel}, I${2}${1:myModel}Content } from './${1:myModel}';",
			"export { ${1:myModel}Resolver } from './${1:myModel}.resolver';",
			"export { ${2}${1:myModel}Service } from './${1:myModel}.service';",
			"export { default } from './${1:myModel}.gql';",
			""
		],
		"description": "GraphQl node index file"
	},
	"node:service": {
		"prefix": "nservice",
		"body": [
			"import { Document, Model, model } from 'mongoose';",
			"import { authorize, buildModelLoaderById, DataLoader, Repository } from '~/graph/common';",
			"import { IUser } from '~/graph/nodes';",
			"",
			"import { I${2}${1:MyModel}, I${2}${1:myModel}Content, ${2}${1:myModel} } from './${1:myModel}';",
			"",
			"export class ${2}${1:myModel}Service {",
			"",
			"  constructor(",
			"    protected user: IUser,",
			"    protected dbModel: Model<I${2}${1:myModel} & Document> = ${2}${1:myModel},",
			"    protected repository: Repository<I${2}${1:myModel}Content, I${2}${1:myModel}> =",
			"      new Repository<I${2}${1:myModel}Content, I${2}${1:myModel}>(dbModel, buildModelLoaderById(${2}${1:myModel})),",
			"  ) { }",
			"",
			"  load = async (key: string) => (await this.loadMany([key]))[0];",
			"  insert = async (modelData: I${2}${1:myModel}Content) => (await this.insertMany([modelData]))[0];",
			"",
			"  @authorize<I${2}${1:myModel}>(",
			"    // check whether user is logged in and have global permission",
			"    { checkPre: (user) => (user && user.permissions.global.indexOf('readAll${2}${1:myModel}s') >= 0) },",
			"    // check wether the user is owner (post load check)",
			"    { checkPost: (user, ${1:myModel}) => !${1:myModel} || (user && (${1:myModel}.owners.indexOf(user._id) >= 0)) },",
			"  )",
			"  loadMany(keys: string[]): Promise<I${2}${1:myModel}[]> {",
			"    return this.repository.loadMany(keys);",
			"  }",
			"",
			"  @authorize({ checkPre: (user) => !!user })",
			"  insertMany(models: I${2}${1:myModel}Content[]): Promise<I${2}${1:myModel}[]> {",
			"",
			"    const modelsData = models.map(x => ({ ...x, owners: [this.user._id] }));",
			"    return this.repository.insertMany(modelsData);",
			"",
			"  }",
			"",
			"}",
			""
		],
		"description": "GraphQl node service"
	},
	"node:resolver": {
		"prefix": "nresolver",
		"body": [
			"import { Context } from '~/graph/context';",
			"",
			"import { I${2}${1:myModel}, I${2}${1:myModel}Content } from './${1:myModel}';",
			"",
			"export const ${1:myModel}Resolver = {",
			"  ${2}${1:myModel}: {",
			"  },",
			"",
			"  Query: {",
			"    ${1:myModel}(obj: {}, args: { id: string }, context: Context): Promise<I${2}${1:myModel}> {",
			"      return context.service.${1:myModel}.load(args.id);",
			"    },",
			"    ${1:myModel}s(obj: {}, args: { ids: string[] }, context: Context): Promise<I${2}${1:myModel}[]> {",
			"      return context.service.${1:myModel}.loadMany(args.ids);",
			"    },",
			"  },",
			"",
			"  Mutation: {",
			"    create${2}${1:myModel}(obj: {}, args: I${2}${1:myModel}Content, context: Context): Promise<I${2}${1:myModel}> {",
			"      return context.service.${1:myModel}.insert(args);",
			"    },",
			"  },",
			"  Subscription: {},",
			"};",
			""
		],
		"description": "GraphQl node resolver"
	},
	"node:model": {
		"prefix": "nmodel",
		"body": [
			"import mongoose, { Document, Model, Schema, Types } from 'mongoose';",
			"import { IDocument, IModel } from '~/graph/common';",
			"",
			"export interface I${1:myModel}Content {",
			"  ${2:prop1}: string,",
			"}",
			"",
			"export interface I${1:myModel} extends I${1:myModel}Content, IModel {",
			"  ${3:refProp}Ids: Types.ObjectId[],",
			"}",
			"",
			"interface I${1:myModel}Model extends I${1:myModel}, IDocument { }",
			"",
			"const schema = new Schema({",
			"  ${2:prop1}: String,",
			"  ${3:refProp}Ids: [{ type: Schema.Types.ObjectId, ref: '${4}${3:refProp}', index: true }],",
			"});",
			"",
			"// check whether ${1:myModel} model was not defined yet. This can happen because of watch mode",
			"/* tslint:disable-next-line no-any */",
			"export const ${1:myModel}: Model<I${1:myModel}Model> =  (mongoose as any).models.${1:myModel} || mongoose.model('${1:myModel}', schema);",
			""
		],
		"description": "MongoDb model used for GraphQl node "
	}
}