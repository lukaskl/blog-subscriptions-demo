// tslint:disable
import { Context } from '~/graph/context';
/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface IGqlQuery {
  _nothing?: number;
  blogPosts?: Array<IGqlBlogPost | null>;
  blogPost?: IGqlBlogPost;
  comment: IGqlComment;
}

export interface IGqlBlogPost {
  id: string;
  isPublic?: boolean;
  name: string;
  description?: string;
  comments: Array<IGqlComment>;
  commentsCount: number;
}

export interface IGqlComment {
  id: string;
  title: string;
  content?: string;
}

export interface IGqlMutation {
  _nothing?: number;
  createBlogPost: IGqlBlogPost;
  deleteBlogPost: IGqlBlogPostBase;
  updateBlogPost: IGqlBlogPost;
  createComment: IGqlCreateCommentResult;
  deleteComment: IGqlDeleteCommentResult;
  updateComment: IGqlComment;
}

export interface IGqlBlogPostCreate {
  isPublic?: boolean;
  name: string;
  description?: string;
}

export interface IGqlBlogPostBase {
  id: string;
  isPublic?: boolean;
  name: string;
  description?: string;
}

export interface IGqlBlogPostUpdate {
  isPublic?: boolean;
  name?: string;
  description?: string;
}

export interface IGqlCommentCreate {
  title: string;
  content?: string;
}

export interface IGqlCreateCommentResult {
  blogPost: IGqlBlogPost;
  comment: IGqlComment;
}

export interface IGqlDeleteCommentResult {
  comment: IGqlCommentBase;
  blogPost: IGqlBlogPost;
}

export interface IGqlCommentBase {
  id: string;
  title: string;
  content?: string;
}

export interface IGqlCommentUpdate {
  title?: string;
  content?: string;
}

export interface IGqlSubscription {
  _nothing?: number;
  blogPostCreated: IGqlBlogPostCreatedEvent;
  blogPostDeleted: IGqlBlogPostDeletedEvent;
  blogPostUpdated: IGqlBlogPostUpdatedEvent;
  commentCreated: IGqlCommentCreateEvent;
  commentDeleted: IGqlCommentDeletedEvent;
  commentUpdated: IGqlComment;
}

export interface IGqlBlogPostCreatedEvent {
  meta: IGqlEventMeta;
  payload: IGqlBlogPost;
}

export interface IGqlEventMeta {
  createdAt: IGqlDateTime;
  initiator: string;
}

/**
 * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
 */
export type IGqlDateTime = any;

export interface IGqlBlogPostDeletedEvent {
  meta: IGqlEventMeta;
  payload: IGqlBlogPostBase;
}

export interface IGqlBlogPostUpdatedEvent {
  meta: IGqlEventMeta;
  payload: IGqlBlogPost;
}

export interface IGqlCommentCreateEvent {
  meta: IGqlEventMeta;
  payload: IGqlCreateCommentResult;
}

export interface IGqlCommentDeletedEvent {
  meta: IGqlEventMeta;
  payload: IGqlDeleteCommentResult;
}

export type IGqlJSON = any;

export interface IGqlCommentUpdatedEvent {
  meta: IGqlEventMeta;
  payload: IGqlComment;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface IGqlResolver {
  Query?: IGqlQueryTypeResolver;
  BlogPost?: IGqlBlogPostTypeResolver;
  Comment?: IGqlCommentTypeResolver;
  Mutation?: IGqlMutationTypeResolver;
  BlogPostBase?: IGqlBlogPostBaseTypeResolver;
  CreateCommentResult?: IGqlCreateCommentResultTypeResolver;
  DeleteCommentResult?: IGqlDeleteCommentResultTypeResolver;
  CommentBase?: IGqlCommentBaseTypeResolver;
  Subscription?: IGqlSubscriptionTypeResolver;
  BlogPostCreatedEvent?: IGqlBlogPostCreatedEventTypeResolver;
  EventMeta?: IGqlEventMetaTypeResolver;
  DateTime?: GraphQLScalarType;
  BlogPostDeletedEvent?: IGqlBlogPostDeletedEventTypeResolver;
  BlogPostUpdatedEvent?: IGqlBlogPostUpdatedEventTypeResolver;
  CommentCreateEvent?: IGqlCommentCreateEventTypeResolver;
  CommentDeletedEvent?: IGqlCommentDeletedEventTypeResolver;
  JSON?: GraphQLScalarType;
  CommentUpdatedEvent?: IGqlCommentUpdatedEventTypeResolver;
}
export interface IGqlQueryTypeResolver<TParent = any> {
  _nothing?: QueryTo_nothingResolver<TParent>;
  blogPosts?: QueryToBlogPostsResolver<TParent>;
  blogPost?: QueryToBlogPostResolver<TParent>;
  comment?: QueryToCommentResolver<TParent>;
}

export interface QueryTo_nothingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult;
}

export interface QueryToBlogPostsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult;
}

export interface QueryToBlogPostArgs {
  id: string;
}
export interface QueryToBlogPostResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToBlogPostArgs, context: Context, info: GraphQLResolveInfo): TResult;
}

export interface QueryToCommentArgs {
  id: string;
}
export interface QueryToCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToCommentArgs, context: Context, info: GraphQLResolveInfo): TResult;
}

export interface IGqlBlogPostTypeResolver<TParent = any> {
  id?: BlogPostToIdResolver<TParent>;
  isPublic?: BlogPostToIsPublicResolver<TParent>;
  name?: BlogPostToNameResolver<TParent>;
  description?: BlogPostToDescriptionResolver<TParent>;
  comments?: BlogPostToCommentsResolver<TParent>;
  commentsCount?: BlogPostToCommentsCountResolver<TParent>;
}

export interface BlogPostToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult;
}

export interface BlogPostToIsPublicResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult;
}

export interface BlogPostToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult;
}

export interface BlogPostToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult;
}

export interface BlogPostToCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult;
}

export interface BlogPostToCommentsCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult;
}

export interface IGqlCommentTypeResolver<TParent = any> {
  id?: CommentToIdResolver<TParent>;
  title?: CommentToTitleResolver<TParent>;
  content?: CommentToContentResolver<TParent>;
}

export interface CommentToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult;
}

export interface CommentToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult;
}

export interface CommentToContentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult;
}

export interface IGqlMutationTypeResolver<TParent = any> {
  _nothing?: MutationTo_nothingResolver<TParent>;
  createBlogPost?: MutationToCreateBlogPostResolver<TParent>;
  deleteBlogPost?: MutationToDeleteBlogPostResolver<TParent>;
  updateBlogPost?: MutationToUpdateBlogPostResolver<TParent>;
  createComment?: MutationToCreateCommentResolver<TParent>;
  deleteComment?: MutationToDeleteCommentResolver<TParent>;
  updateComment?: MutationToUpdateCommentResolver<TParent>;
}

export interface MutationTo_nothingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateBlogPostArgs {
  content: IGqlBlogPostCreate;
}
export interface MutationToCreateBlogPostResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateBlogPostArgs, context: Context, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteBlogPostArgs {
  id: string;
}
export interface MutationToDeleteBlogPostResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteBlogPostArgs, context: Context, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateBlogPostArgs {
  id: string;
  content: IGqlBlogPostUpdate;
}
export interface MutationToUpdateBlogPostResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateBlogPostArgs, context: Context, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateCommentArgs {
  postId: string;
  content: IGqlCommentCreate;
}
export interface MutationToCreateCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateCommentArgs, context: Context, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteCommentArgs {
  postId: string;
  commentId: string;
}
export interface MutationToDeleteCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteCommentArgs, context: Context, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateCommentArgs {
  id: string;
  content: IGqlCommentUpdate;
}
export interface MutationToUpdateCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateCommentArgs, context: Context, info: GraphQLResolveInfo): TResult;
}

export interface IGqlBlogPostBaseTypeResolver<TParent = any> {
  id?: BlogPostBaseToIdResolver<TParent>;
  isPublic?: BlogPostBaseToIsPublicResolver<TParent>;
  name?: BlogPostBaseToNameResolver<TParent>;
  description?: BlogPostBaseToDescriptionResolver<TParent>;
}

export interface BlogPostBaseToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult;
}

export interface BlogPostBaseToIsPublicResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult;
}

export interface BlogPostBaseToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult;
}

export interface BlogPostBaseToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult;
}

export interface IGqlCreateCommentResultTypeResolver<TParent = any> {
  blogPost?: CreateCommentResultToBlogPostResolver<TParent>;
  comment?: CreateCommentResultToCommentResolver<TParent>;
}

export interface CreateCommentResultToBlogPostResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult;
}

export interface CreateCommentResultToCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult;
}

export interface IGqlDeleteCommentResultTypeResolver<TParent = any> {
  comment?: DeleteCommentResultToCommentResolver<TParent>;
  blogPost?: DeleteCommentResultToBlogPostResolver<TParent>;
}

export interface DeleteCommentResultToCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult;
}

export interface DeleteCommentResultToBlogPostResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult;
}

export interface IGqlCommentBaseTypeResolver<TParent = any> {
  id?: CommentBaseToIdResolver<TParent>;
  title?: CommentBaseToTitleResolver<TParent>;
  content?: CommentBaseToContentResolver<TParent>;
}

export interface CommentBaseToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult;
}

export interface CommentBaseToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult;
}

export interface CommentBaseToContentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult;
}

export interface IGqlSubscriptionTypeResolver<TParent = any> {
  _nothing?: SubscriptionTo_nothingResolver<TParent>;
  blogPostCreated?: SubscriptionToBlogPostCreatedResolver<TParent>;
  blogPostDeleted?: SubscriptionToBlogPostDeletedResolver<TParent>;
  blogPostUpdated?: SubscriptionToBlogPostUpdatedResolver<TParent>;
  commentCreated?: SubscriptionToCommentCreatedResolver<TParent>;
  commentDeleted?: SubscriptionToCommentDeletedResolver<TParent>;
  commentUpdated?: SubscriptionToCommentUpdatedResolver<TParent>;
}

export interface SubscriptionTo_nothingResolver<TParent = any, TResult = any> {
  resolve?: (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo) => TResult;
  subscribe: (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
}

export interface SubscriptionToBlogPostCreatedResolver<TParent = any, TResult = any> {
  resolve?: (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo) => TResult;
  subscribe: (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
}

export interface SubscriptionToBlogPostDeletedArgs {
  postId?: string;
}
export interface SubscriptionToBlogPostDeletedResolver<TParent = any, TResult = any> {
  resolve?: (parent: TParent, args: SubscriptionToBlogPostDeletedArgs, context: Context, info: GraphQLResolveInfo) => TResult;
  subscribe: (parent: TParent, args: SubscriptionToBlogPostDeletedArgs, context: Context, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
}

export interface SubscriptionToBlogPostUpdatedArgs {
  postId?: string;
}
export interface SubscriptionToBlogPostUpdatedResolver<TParent = any, TResult = any> {
  resolve?: (parent: TParent, args: SubscriptionToBlogPostUpdatedArgs, context: Context, info: GraphQLResolveInfo) => TResult;
  subscribe: (parent: TParent, args: SubscriptionToBlogPostUpdatedArgs, context: Context, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
}

export interface SubscriptionToCommentCreatedArgs {
  postId: string;
}
export interface SubscriptionToCommentCreatedResolver<TParent = any, TResult = any> {
  resolve?: (parent: TParent, args: SubscriptionToCommentCreatedArgs, context: Context, info: GraphQLResolveInfo) => TResult;
  subscribe: (parent: TParent, args: SubscriptionToCommentCreatedArgs, context: Context, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
}

export interface SubscriptionToCommentDeletedArgs {
  postId: string;
}
export interface SubscriptionToCommentDeletedResolver<TParent = any, TResult = any> {
  resolve?: (parent: TParent, args: SubscriptionToCommentDeletedArgs, context: Context, info: GraphQLResolveInfo) => TResult;
  subscribe: (parent: TParent, args: SubscriptionToCommentDeletedArgs, context: Context, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
}

export interface SubscriptionToCommentUpdatedArgs {
  postId: string;
}
export interface SubscriptionToCommentUpdatedResolver<TParent = any, TResult = any> {
  resolve?: (parent: TParent, args: SubscriptionToCommentUpdatedArgs, context: Context, info: GraphQLResolveInfo) => TResult;
  subscribe: (parent: TParent, args: SubscriptionToCommentUpdatedArgs, context: Context, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
}

export interface IGqlBlogPostCreatedEventTypeResolver<TParent = any> {
  meta?: BlogPostCreatedEventToMetaResolver<TParent>;
  payload?: BlogPostCreatedEventToPayloadResolver<TParent>;
}

export interface BlogPostCreatedEventToMetaResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult;
}

export interface BlogPostCreatedEventToPayloadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult;
}

export interface IGqlEventMetaTypeResolver<TParent = any> {
  createdAt?: EventMetaToCreatedAtResolver<TParent>;
  initiator?: EventMetaToInitiatorResolver<TParent>;
}

export interface EventMetaToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult;
}

export interface EventMetaToInitiatorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult;
}

export interface IGqlBlogPostDeletedEventTypeResolver<TParent = any> {
  meta?: BlogPostDeletedEventToMetaResolver<TParent>;
  payload?: BlogPostDeletedEventToPayloadResolver<TParent>;
}

export interface BlogPostDeletedEventToMetaResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult;
}

export interface BlogPostDeletedEventToPayloadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult;
}

export interface IGqlBlogPostUpdatedEventTypeResolver<TParent = any> {
  meta?: BlogPostUpdatedEventToMetaResolver<TParent>;
  payload?: BlogPostUpdatedEventToPayloadResolver<TParent>;
}

export interface BlogPostUpdatedEventToMetaResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult;
}

export interface BlogPostUpdatedEventToPayloadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult;
}

export interface IGqlCommentCreateEventTypeResolver<TParent = any> {
  meta?: CommentCreateEventToMetaResolver<TParent>;
  payload?: CommentCreateEventToPayloadResolver<TParent>;
}

export interface CommentCreateEventToMetaResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult;
}

export interface CommentCreateEventToPayloadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult;
}

export interface IGqlCommentDeletedEventTypeResolver<TParent = any> {
  meta?: CommentDeletedEventToMetaResolver<TParent>;
  payload?: CommentDeletedEventToPayloadResolver<TParent>;
}

export interface CommentDeletedEventToMetaResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult;
}

export interface CommentDeletedEventToPayloadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult;
}

export interface IGqlCommentUpdatedEventTypeResolver<TParent = any> {
  meta?: CommentUpdatedEventToMetaResolver<TParent>;
  payload?: CommentUpdatedEventToPayloadResolver<TParent>;
}

export interface CommentUpdatedEventToMetaResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult;
}

export interface CommentUpdatedEventToPayloadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: Context, info: GraphQLResolveInfo): TResult;
}
